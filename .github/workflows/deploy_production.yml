name: Deploy production app to Firebase App Distribution
on:
  push:
    branches:
      - main

jobs:
  deploy_android:
    name: Deploy Android app to Firebase App Distribution
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: production
    defaults:
      run:
        working-directory: ./sample
    steps:
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches/modules-*
            ~/.gradle/caches/jars-*
            ~/.gradle/caches/build-cache-*
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up the necessary config
        run: |
          echo "${{ secrets.BUILD_KONFIG_PROPERTIES }}" > buildKonfig.properties
          echo "${{ secrets.ANDROID_SIGNING_PROPERTIES }}" > signing.properties
          echo "${{ secrets.ANDROID_RELEASE_KEYSTORE }}" | base64 --decode > config/release.keystore

      - name: Build production APK
        run: ./gradlew assembleProductionRelease -PversionCode=$GITHUB_RUN_NUMBER

      - name: Deploy production to Firebase
        uses: wzieba/Firebase-Distribution-Github-Action@v1.7.0
        with:
          appId: ${{ vars.ANDROID_FIREBASE_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_CREDENTIAL_FILE_CONTENT }}
          groups: nimble
          file: sample/android/build/outputs/apk/production/release/android-production-release.apk

  deploy_ios_production:
    runs-on: macos-latest
    environment: production
    defaults:
      run:
        working-directory: ./sample/ios
    steps:
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache Gradle
        uses: actions/cache@v3.3.2
        with:
          path: |
            ~/.gradle/caches/modules-*
            ~/.gradle/caches/jars-*
            ~/.gradle/caches/build-cache-*
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install SSH key - For accessing match repo
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - uses: actions/cache@v3
        id: bunlderCache
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Bundle install
        run: bundle install --path vendor/bundle

      - name: Cache Pods
        uses: actions/cache@v2
        id: cocoapodCache
        with:
          path: Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install Pods Dependencies
        run: bundle exec pod install
        shell: bash

      - name: Decode buildKonfig properties
        run: |
          cd ..
          echo "${{ secrets.BUILD_KONFIG_PROPERTIES }}" > buildKonfig.properties

      - name: Paste Google-Info.plist from .secrets
        run: |
          mkdir -p sample/Configurations/Plists/GoogleService/Production
          echo ${{ secrets.IOS_GOOGLE_INFO_PLIST }} | base64 --decode > ./sample/Configurations/Plists/GoogleService/Production/GoogleService-Info.plist

      - name: Paste Constants for Fastlane from .secrets
        run: |
          mkdir -p fastlane/Constants
          echo ${{ secrets.IOS_FASTLANE_CONSTANTS }} | base64 --decode > ./fastlane/Constants/Constant.swift

      - name: Generate KMM frameworks for Cocoapods
        run: |
          cd ..
          ./gradlew generateDummyFramework

      - name: Build and Test
        run: bundle exec fastlane buildAndTest

      - name: Match AppStore
        run: bundle exec fastlane syncAppStoreCodeSigning
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASS }}

      - name: Build App and Distribute to AppStore
        run: bundle exec fastlane buildAndUploadToAppStore
        env:
          APPSTORE_CONNECT_API_KEY: ${{ secrets.IOS_APPSTORE_CONNECT_API_KEY }}
          API_KEY_ID: ${{ secrets.IOS_API_KEY_ID }}
          ISSUER_ID: ${{ secrets.IOS_ISSUER_ID }}
          BUMP_APP_STORE_BUILD_NUMBER: "true"

      - name: Remove Keychain
        if: ${{ always() }}
        run: bundle exec fastlane run delete_keychain
        continue-on-error: true
