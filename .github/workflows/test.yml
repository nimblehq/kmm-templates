name: Code analysis, test and generate sample project
on:
  pull_request:
    types: [ opened, synchronize, reopened, ready_for_review ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Code analysis, test and generate sample project
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
      - name: Check out
        uses: actions/checkout@v3
        with:
          fetch-depth: 100
          ref: ${{ github.head_ref }}
          submodules: "recursive"

      # Generate working project

      - name: Remove the old sample project
        run: rm -rf sample

      - name: Generate the new sample project
        run: ./make.sh --bundle-id co.nimblehq.kmm.template --bundle-id-staging co.nimblehq.kmm.template.staging --project-name sample --ios-version 14.0

      # Run code analytics and tests

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Decode buildKonfig properties
        run: echo ${{ secrets.BUILD_KONFIG_PROPERTIES }} | base64 --decode > ./buildKonfig.properties

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches/modules-*
            ~/.gradle/caches/jars-*
            ~/.gradle/caches/build-cache-*
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run Detekt
        working-directory: ./sample
        run: ./gradlew detekt

      - name: Run Lint
        working-directory: ./sample
        run: ./gradlew lint

      - name: Run unit tests with Kover
        working-directory: ./sample
        run: ./gradlew koverXMLReport

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7'
          bundler-cache: true

      - name: Cache gems
        uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('Gemfile') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Run Danger to wrap up the review
        env:
          DANGER_GITHUB_API_TOKEN: ${{ secrets.DANGER_GITHUB_API_TOKEN }}
        working-directory: ./sample
        run: |
          bundle config path vendor/bundle
          bundle install
          bundle exec danger

  ios_test:
    name: Running iOS tests
    runs-on: macos-latest
    defaults:
      run:
        working-directory: ./sample/ios
    steps:
      - name: Check out
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up cache
        uses: actions/cache@v3
        id: bunlderCache
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Setup Java JDK
        uses: actions/setup-java@v2.1.0
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Remove the old sample project
        run: rm -rf sample
        working-directory: ./

      - name: Generate the new sample project
        run: sh make.sh --bundle-id co.nimble.kmm.sample --bundle-id-staging co.nimble.kmm.sample.staging --project-name sample --ios-version 14.0
        working-directory: ./

      - name: Bundle install
        run: bundle install

      - name: Cache Pods
        uses: actions/cache@v3
        id: cocoapodCache
        with:
          path: Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Decode buildKonfig properties
        working-directory: ./sample
        run: echo ${{ secrets.BUILD_KONFIG_PROPERTIES }} | base64 --decode > buildKonfig.properties

      - name: Generate KMM frameworks for Cocoapods
        run: |
          cd ..
          ./gradlew generateDummyFramework

      - name: Install Pods Dependencies
        run: bundle exec pod install

      - name: Build and Test
        run: bundle exec fastlane buildAndTest
        env:
          CI: true

      - name: Clean up previous code coverage report
        run: bundle exec fastlane cleanUpOutput

      - name: Run Danger to wrap up the review
        env:
          DANGER_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: bundle exec danger

  generate_sample_project:
    # The job "generate_sample_project" identify that the job "test" must complete successfully
    # before this "generate_sample_project" job will run
    needs: [test, ios_test]
    name: Generate the sample project
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
      - name: Check out
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          submodules: "recursive"

      # To avoid code change in git when refreshing the "sample" project
      - name: Preserve the ArkanaKeys
        run: mv -f ./sample/ios/ArkanaKeys ../

      - name: Remove the old sample project
        run: rm -rf sample

      - name: Generate the new sample project
        run: ./make.sh --bundle-id co.nimble.kmm.sample --bundle-id-staging co.nimble.kmm.sample.staging --project-name sample --ios-version 14.0

      - name: Restore the previous ArkanaKeys's keys
        run: |
          rm -rf ./sample/ios/ArkanaKeys
          mv -f ../ArkanaKeys ./sample/ios

      - id: changes
        name: Check for changes in the sample project
        run: |
          count=$(git status sample --porcelain | wc -l)
          echo "count=$count" >> $GITHUB_OUTPUT

      - name: Commit & push the sample project changes
        if: steps.changes.outputs.count > 0
        run: |
          git config user.name team-nimblehq
          git config user.email bot@nimblehq.co
          git add sample
          git commit -m "[Chore] Generate & update sample project"
          git push
