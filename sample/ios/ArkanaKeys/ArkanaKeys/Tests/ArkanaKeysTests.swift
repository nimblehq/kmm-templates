// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces
import XCTest
@testable import ArkanaKeys

final class ArkanaKeysTests: XCTestCase {
    private var salt: [UInt8]!
    private var globalSecrets: ArkanaKeysGlobalProtocol!

    override func setUp() {
        super.setUp()
        salt = [
            0xf6, 0x2, 0x90, 0xa4, 0xfd, 0x71, 0x6, 0x3d, 0x9, 0x3d, 0xd2, 0x5f, 0xfc, 0x61, 0x9a, 0x87, 0x98, 0xb0, 0x9f, 0xf0, 0x3b, 0xde, 0x64, 0xdb, 0x18, 0xf0, 0x32, 0x2a, 0xcb, 0x2c, 0xf1, 0x8f, 0x29, 0xc4, 0x2, 0xfa, 0x48, 0x9f, 0x1, 0x1e, 0x5f, 0x5f, 0x25, 0x6a, 0x4a, 0x6, 0xbe, 0xc8, 0x64, 0xe8, 0xb0, 0xe9, 0xd7, 0x73, 0x79, 0x99, 0x4a, 0xd8, 0x18, 0x4e, 0xa3, 0x38, 0xaf, 0x83
        ]
        globalSecrets = ArkanaKeys.Global()
    }

    override func tearDown() {
        globalSecrets = nil
        salt = nil
        super.tearDown()
    }

    func test_decodeRandomHexKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x90, 0x67, 0xa3, 0xc2, 0xcb, 0x40, 0x30, 0xd, 0x6c, 0x8, 0xeb, 0x68, 0xc9, 0x50, 0xf9, 0xe5, 0xa8, 0x89, 0xfd, 0xc2, 0x5e, 0xbd, 0x6, 0xec, 0x2f, 0x95, 0x5, 0x1c, 0xae, 0x1a, 0xc1, 0xec, 0x1d, 0xfc, 0x3b, 0x98, 0x2c, 0xa8, 0x32, 0x7d, 0x66, 0x3d, 0x17, 0xb, 0x2b, 0x35, 0xdf, 0xf1, 0x54, 0x8a, 0x80, 0xda, 0xb3, 0x47, 0x49, 0xaa, 0x78, 0xe9, 0x21, 0x7b, 0x9b, 0x5c, 0x9b, 0xb5, 0xc1, 0x63, 0xf3, 0xc0, 0xca, 0x45, 0x31, 0xa, 0x68, 0x5c, 0xea, 0x3d, 0x98, 0x51, 0xf8, 0xe6, 0xae, 0xd2, 0xae, 0xc0, 0x5e, 0xbb, 0x56, 0xb9, 0x7b, 0x96, 0x51, 0x1c, 0xfc, 0x49, 0xc6, 0xeb, 0x4b, 0xa7, 0x66, 0x9c, 0x71, 0xaa, 0x60, 0x28, 0x67, 0x68, 0x10, 0x53, 0x79, 0x65, 0x89, 0xf1, 0x54, 0x8e, 0x86, 0xd9, 0xef, 0x46, 0x49, 0xa9, 0x7b, 0xe8, 0x28, 0x7b, 0xc6, 0xc, 0xc9, 0xbb
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "fe3f6160e59751cb09b2ecb77e76e60c489bd73c9b2aa3a90b03d40321958d467acd7477aa8bd0ba6b10ee2bcfc67e7dbcdf95a687593c790f6085001005e4f8")
    }

    func test_decodeRandomBase64Key_shouldDecode() {
        let encoded: [UInt8] = [
            0xbf, 0x2d, 0xff, 0xf0, 0xb6, 0x38, 0x6d, 0x6b, 0x42, 0xf, 0x85, 0x10, 0xbf, 0x2b, 0xfd, 0xed, 0xd1, 0x86, 0xd7, 0xa5, 0x4d, 0xe9, 0xe, 0xf4, 0x74, 0xb8, 0x19, 0x6c, 0x92, 0x1b, 0x9b, 0xe2, 0x4b, 0xfd, 0x65, 0x9b, 0xc, 0xcc, 0x71, 0x76, 0x16, 0x7, 0x44, 0xc, 0x21, 0x62, 0xcb, 0xf0, 0x21, 0xa9, 0xc2, 0x82, 0xba, 0x2, 0x29, 0xa1, 0x25, 0xac, 0x5e, 0x3c, 0xd2, 0x8, 0x9b, 0xd7, 0x99, 0x37, 0xca, 0x93, 0xc9, 0x1f, 0x41, 0x48, 0x53, 0x58, 0x9e, 0x70, 0xb6, 0x2a, 0xe2, 0xbf, 0xc1, 0xd6, 0xe7, 0xc9, 0x7f, 0xb9, 0x59, 0xe6
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "I/oTKIkVK2WOCJgjI6HUv7j/lH+FY7jmb9gaDSphIXafkdu8EArkmqP8otFrq04To5Z74nGuZeL/JKx8Yfx9Dg==")
    }

    func test_decodeUUIDKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x92, 0x37, 0xf5, 0xc1, 0xce, 0x17, 0x31, 0xa, 0x24, 0x5f, 0xe0, 0x6f, 0xc9, 0x4c, 0xae, 0xbe, 0xa8, 0x89, 0xb2, 0xc9, 0x5f, 0xbc, 0, 0xf6, 0x7d, 0xc9, 0x7, 0x4c, 0xf2, 0x4f, 0xc9, 0xb8, 0x1a, 0xfd, 0x63, 0x99
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "d5ee3f77-b205-4909-9dbd-e95f9c8739ac")
    }

    func test_decodeTrueBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x82, 0x70, 0xe5, 0xc1
        ]
        XCTAssertTrue(ArkanaKeys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeFalseBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x90, 0x63, 0xfc, 0xd7, 0x98
        ]
        XCTAssertFalse(ArkanaKeys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeIntValue_shouldDecode() {
        let encoded: [UInt8] = [
            0xc2, 0x30
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), 42)
    }

    func test_encodeAndDecodeValueWithDollarSign_shouldDecode() {
        let encoded: [UInt8] = [
            0x84, 0x67, 0xf1, 0xc8, 0xa2, 0x55, 0x6a, 0x54, 0x64, 0x62, 0xa1, 0x37, 0x9d, 0x5, 0xe3
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "real_$lim_shady")
    }
}
