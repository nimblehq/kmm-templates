// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces
import XCTest
@testable import ArkanaKeys

final class ArkanaKeysTests: XCTestCase {
    private var salt: [UInt8]!
    private var globalSecrets: ArkanaKeysGlobalProtocol!

    override func setUp() {
        super.setUp()
        salt = [
            0x86, 0xd4, 0xdb, 0x6d, 0x70, 0xe0, 0xde, 0xe0, 0x6d, 0x4f, 0x60, 0x7, 0x14, 0xe6, 0xad, 0x82, 0xe0, 0xea, 0xbc, 0x97, 0x11, 0xa9, 0x57, 0x38, 0xbb, 0x1f, 0xa7, 0x26, 0x8c, 0x12, 0xe1, 0x81, 0xe, 0x86, 0x5e, 0x27, 0x8e, 0xd0, 0x74, 0xfa, 0xab, 0x65, 0x2e, 0xe2, 0x60, 0x39, 0xaf, 0xd0, 0xe6, 0x90, 0x5f, 0xb0, 0x1c, 0xb1, 0xf6, 0xf3, 0x56, 0x59, 0x89, 0x7f, 0xc8, 0x1c, 0x22, 0xcc
        ]
        globalSecrets = ArkanaKeys.Global()
    }

    override func tearDown() {
        globalSecrets = nil
        salt = nil
        super.tearDown()
    }

    func test_decodeRandomHexKey_shouldDecode() {
        let encoded: [UInt8] = [
            0xb2, 0xe4, 0xbe, 0xb, 0x45, 0x85, 0xe7, 0xd0, 0xb, 0x29, 0x53, 0x3e, 0x22, 0xd6, 0x9f, 0xe0, 0x82, 0xd8, 0xd8, 0xf1, 0x28, 0xcf, 0x34, 0xc, 0x89, 0x7b, 0x9e, 0x14, 0xba, 0x2a, 0x82, 0xe3, 0x38, 0xb3, 0x3b, 0x46, 0xbb, 0xb1, 0x4c, 0xca, 0xce, 0x53, 0x1b, 0xd2, 0x52, 0xc, 0x9f, 0xe1, 0x85, 0xf6, 0x3b, 0xd6, 0x7f, 0xd4, 0xcf, 0xc5, 0x67, 0x3f, 0xb9, 0x4b, 0xae, 0x7d, 0x17, 0xfb, 0xb6, 0xed, 0xbe, 0x54, 0x13, 0xd8, 0xeb, 0x81, 0x8, 0x7f, 0x6, 0x62, 0x2c, 0xd7, 0x9b, 0xe0, 0x85, 0x8f, 0xda, 0xa6, 0x27, 0x98, 0x65, 0x5e, 0x8a, 0x29, 0xc2, 0x45, 0xbe, 0x76, 0xd2, 0xb6, 0x6d, 0xb6, 0x6d, 0x41, 0xbf, 0xe7, 0x43, 0xcf, 0x92, 0x3, 0x19, 0xd6, 0x2, 0xd, 0x98, 0xe1, 0xdf, 0xa6, 0x39, 0x84, 0x7a, 0x83, 0x92, 0xc4, 0x35, 0x38, 0xef, 0x4c, 0xac, 0x2e, 0x14, 0xae
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "40ef5e90ff39602bb2df9fc42d9268cb65ea5a80e6502501cfdfce961f04fa5709e9c85ae0fe816beef1612f16ec2d37c03f17759f74b47196f4f2d7caf3d26b")
    }

    func test_decodeRandomBase64Key_shouldDecode() {
        let encoded: [UInt8] = [
            0xf3, 0x91, 0xb9, 0x6, 0x39, 0x92, 0xbd, 0xa5, 0x21, 0x3c, 0x1, 0x55, 0x51, 0x92, 0xdb, 0xca, 0x95, 0xd3, 0x8b, 0xe2, 0x50, 0xfa, 0x61, 0xd, 0x8b, 0x34, 0xc0, 0x6a, 0xfe, 0x57, 0x85, 0xf9, 0x49, 0xd4, 0xd, 0x73, 0xfd, 0xb3, 0x26, 0x8b, 0xcc, 0x4e, 0x5, 0xc9, 0x2d, 0x9, 0xcd, 0x86, 0xd4, 0xdf, 0x6, 0x80, 0x51, 0xdc, 0x81, 0x80, 0x11, 0x3f, 0xd1, 0x4e, 0x89, 0x65, 0x4b, 0xba, 0xdf, 0x90, 0xbe, 0x39, 0, 0x99, 0xed, 0x85, 0x34, 0xa, 0x24, 0x53, 0x56, 0xcd, 0x95, 0xa9, 0xcf, 0xab, 0xd4, 0xdd, 0x3e, 0xe8, 0x6a, 0x5
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "uEbkIrcELsaREtvHu97uAS650+gLrEdxGRSTscRqg+++M0bV2OY0MmwsGfX1AyivYDeTpy3eYEDTB+8+/AhJ/A==")
    }

    func test_decodeUUIDKey_shouldDecode() {
        let encoded: [UInt8] = [
            0xe0, 0xb1, 0xbd, 0xb, 0x45, 0x81, 0xed, 0xd9, 0x40, 0x79, 0x5, 0x3e, 0x25, 0xcb, 0x99, 0xb0, 0xd8, 0xdb, 0x91, 0xae, 0x77, 0x9c, 0x36, 0x15, 0x82, 0x2d, 0xc6, 0x43, 0xb5, 0x71, 0xd2, 0xb1, 0x6a, 0xb1, 0x6d, 0x10
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "feff5a39-6e91-4281-9f5a-92ae9c30d737")
    }

    func test_decodeTrueBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0xf2, 0xa6, 0xae, 0x8
        ]
        XCTAssertTrue(ArkanaKeys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeFalseBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0xe0, 0xb5, 0xb7, 0x1e, 0x15
        ]
        XCTAssertFalse(ArkanaKeys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeIntValue_shouldDecode() {
        let encoded: [UInt8] = [
            0xb2, 0xe6
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), 42)
    }

    func test_encodeAndDecodeValueWithDollarSign_shouldDecode() {
        let encoded: [UInt8] = [
            0xf4, 0xb1, 0xba, 0x1, 0x2f, 0xc4, 0xb2, 0x89, 0, 0x10, 0x13, 0x6f, 0x75, 0x82, 0xd4
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "real_$lim_shady")
    }
}
