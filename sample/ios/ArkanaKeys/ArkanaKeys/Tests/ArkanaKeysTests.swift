// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces
import XCTest
@testable import ArkanaKeys

final class ArkanaKeysTests: XCTestCase {
    private var salt: [UInt8]!
    private var globalSecrets: ArkanaKeysGlobalProtocol!

    override func setUp() {
        super.setUp()
        salt = [
            0xe7, 0xa8, 0x8b, 0x89, 0x67, 0xbc, 0x26, 0x29, 0xd, 0xd3, 0xa0, 0x24, 0xbb, 0xe, 0x3e, 0xd4, 0x9f, 0xfd, 0x2a, 0xb, 0xc2, 0x3b, 0x55, 0x3f, 0x6c, 0xce, 0xf5, 0xe4, 0x2b, 0xfe, 0xed, 0x71, 0xc9, 0x4c, 0xda, 0xcc, 0x68, 0x9d, 0x92, 0xcc, 0x43, 0x2f, 0xe1, 0xed, 0x10, 0x86, 0x22, 0xdf, 0x7f, 0xe8, 0x55, 0x91, 0xda, 0xa3, 0x45, 0x22, 0xa7, 0x60, 0x1d, 0x10, 0x73, 0xaf, 0xe1, 0x36
        ]
        globalSecrets = ArkanaKeys.Global()
    }

    override func tearDown() {
        globalSecrets = nil
        salt = nil
        super.tearDown()
    }

    func test_decodeRandomHexKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x85, 0xcb, 0xbc, 0xeb, 0x5f, 0x8a, 0x44, 0x18, 0x3f, 0xb7, 0xc4, 0x14, 0x8f, 0x3c, 0x5d, 0xe6, 0xa8, 0xc5, 0x4c, 0x3d, 0xfa, 0x58, 0x62, 0x5e, 0xe, 0xaf, 0xcd, 0x80, 0x1d, 0xcc, 0x88, 0x48, 0xfd, 0x2d, 0xed, 0xaf, 0x5e, 0xff, 0xa7, 0xfd, 0x25, 0x17, 0x84, 0x89, 0x26, 0xe0, 0x1a, 0xbc, 0x4f, 0xdf, 0x37, 0xf7, 0xe9, 0xc1, 0x26, 0x47, 0x9e, 0x3, 0x2b, 0x20, 0x45, 0xcd, 0xd2, 0x1, 0xd6, 0x98, 0xb8, 0xbf, 0x5f, 0xd9, 0x15, 0x1c, 0x3f, 0xe6, 0xc2, 0x16, 0x8a, 0x39, 0x58, 0xb7, 0xa6, 0xcd, 0x48, 0x32, 0xf2, 0x8, 0x6d, 0xd, 0x55, 0xad, 0x93, 0x82, 0x4e, 0xc9, 0x88, 0x13, 0xaf, 0x79, 0xbc, 0xa8, 0x5a, 0xaa, 0xf6, 0xfe, 0x75, 0x16, 0xd0, 0xdd, 0x20, 0xbf, 0x43, 0xeb, 0x19, 0x8e, 0x62, 0xa6, 0xef, 0xc1, 0x20, 0x14, 0x97, 0x2, 0x78, 0x25, 0x42, 0x98, 0xd0, 0x2
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "bc7b86b12dd042c278f68c7aba8d62e94a7c6b51f8ed6f8c07bf3bce9c606b3710368e3525b217fc90b903829cffe7ebf5fd27d2691009a4ff775be60be51714")
    }

    func test_decodeRandomBase64Key_shouldDecode() {
        let encoded: [UInt8] = [
            0x9d, 0xea, 0xbc, 0xc0, 0x57, 0xe8, 0x60, 0x45, 0x5f, 0xf8, 0xe3, 0x4d, 0x8d, 0x6f, 0x76, 0xbe, 0xae, 0xc8, 0x1f, 0x6a, 0xad, 0x4b, 0x7a, 0xc, 0xd, 0xbc, 0xb7, 0x8f, 0, 0x9c, 0xb8, 0x3d, 0x84, 0x78, 0x8d, 0xff, 0, 0xa8, 0xe0, 0x9e, 0x36, 0x58, 0xa8, 0xbe, 0x23, 0xcd, 0x4f, 0xbd, 0x38, 0xbe, 0x6c, 0xc8, 0xa0, 0xf1, 0x70, 0x55, 0xc4, 0x2c, 0x75, 0x7b, 0x4, 0xda, 0xd2, 0x5f, 0xaa, 0xec, 0xba, 0xff, 0xd, 0xf8, 0x12, 0x2, 0x41, 0x9b, 0x93, 0x49, 0xd0, 0x54, 0x73, 0xae, 0xc6, 0xb1, 0x63, 0x32, 0x83, 0x5c, 0x68, 0x2
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "zB7I0TFlR+Ci6aHj155aop/3arBk+bULM4W3h5rRuwIS3KmbGV9YzR5wcLhkwu3iMD1vjD4+LH3mkZMzYLI9Ag==")
    }

    func test_decodeUUIDKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x85, 0x91, 0xbb, 0xbc, 0x1, 0x84, 0x14, 0x4b, 0x20, 0xeb, 0x94, 0x13, 0x83, 0x23, 0xa, 0xb7, 0xaa, 0x9b, 0x7, 0x6a, 0xa4, 0x5a, 0x64, 0x12, 0xa, 0xad, 0xcc, 0xdd, 0x4d, 0xca, 0xdb, 0x12, 0xff, 0x28, 0xee, 0xf9
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "b905f82b-8478-4c5f-afa1-fc99f46c6d45")
    }

    func test_decodeTrueBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x93, 0xda, 0xfe, 0xec
        ]
        XCTAssertTrue(ArkanaKeys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeFalseBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x81, 0xc9, 0xe7, 0xfa, 0x2
        ]
        XCTAssertFalse(ArkanaKeys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeIntValue_shouldDecode() {
        let encoded: [UInt8] = [
            0xd3, 0x9a
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), 42)
    }

    func test_encodeAndDecodeValueWithDollarSign_shouldDecode() {
        let encoded: [UInt8] = [
            0x95, 0xcd, 0xea, 0xe5, 0x38, 0x98, 0x4a, 0x40, 0x60, 0x8c, 0xd3, 0x4c, 0xda, 0x6a, 0x47
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "real_$lim_shady")
    }
}
