// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces
import XCTest
@testable import ArkanaKeys

final class ArkanaKeysTests: XCTestCase {
    private var salt: [UInt8]!
    private var globalSecrets: ArkanaKeysGlobalProtocol!

    override func setUp() {
        super.setUp()
        salt = [
            0xdb, 0x37, 0x91, 0x63, 0xc5, 0x58, 0xfd, 0x56, 0xca, 0x57, 0x6e, 0x7f, 0xdd, 0x75, 0x7f, 0xf2, 0x3f, 0x1d, 0xc2, 0x69, 0xa0, 0x1b, 0x2f, 0xa1, 0xc8, 0xe5, 0x4d, 0xc2, 0xe9, 0x3b, 0x73, 0x35, 0xb8, 0xb4, 0x1d, 0x3d, 0xb8, 0x29, 0xb2, 0xf2, 0xd5, 0x1e, 0x2c, 0x65, 0xb5, 0x97, 0xf, 0x19, 0x42, 0x77, 0xb7, 0x77, 0x55, 0xa9, 0xa0, 0x78, 0xa5, 0xe1, 0x34, 0x19, 0x7c, 0x38, 0x53, 0xaa
        ]
        globalSecrets = ArkanaKeys.Global()
    }

    override func tearDown() {
        globalSecrets = nil
        salt = nil
        super.tearDown()
    }

    func test_decodeRandomHexKey_shouldDecode() {
        let encoded: [UInt8] = [
            0xba, 0xf, 0xa2, 0x5, 0xf4, 0x6b, 0xc8, 0x63, 0xf3, 0x67, 0x56, 0x1a, 0xbf, 0x42, 0x49, 0x91, 0x9, 0x25, 0xa1, 0x5e, 0x94, 0x78, 0x4d, 0xc0, 0xf9, 0xd7, 0x7f, 0xa6, 0x8c, 0x8, 0x40, 0x50, 0x88, 0x8c, 0x7c, 0x9, 0xda, 0x18, 0xd7, 0xc5, 0xb0, 0x7c, 0x48, 0x55, 0x8d, 0xa7, 0x6a, 0x78, 0x74, 0x46, 0x80, 0x40, 0x34, 0xc8, 0xc4, 0x41, 0xc3, 0x82, 0x5, 0x29, 0x1e, 0x8, 0x61, 0xc9, 0xb9, 0x52, 0xa0, 0x51, 0xf0, 0x3a, 0xce, 0x62, 0xf8, 0x6e, 0x5d, 0x4b, 0xe8, 0x46, 0x1d, 0x93, 0x9, 0x7e, 0xa1, 0x5e, 0xc5, 0x22, 0x16, 0x90, 0xfd, 0xd0, 0x7b, 0xa7, 0x88, 0xe, 0x10, 0x51, 0xdc, 0x87, 0x29, 0xf, 0x80, 0x10, 0x80, 0xc1, 0xb3, 0x7f, 0x1b, 0x57, 0x84, 0xae, 0x6a, 0x2a, 0x20, 0x11, 0x87, 0x11, 0x6c, 0x9a, 0x97, 0x1c, 0x90, 0x85, 0x7, 0x20, 0x4b, 0x5b, 0x36, 0x99
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "a83f1355908eb76c68c74cba122de33e08a4b1e7ebd080ea6177aad9fc10b02cbe125b34293453ba6cc7e991556ea5cdd3428923fa7219e3bf0f937d5d397ce3")
    }

    func test_decodeRandomBase64Key_shouldDecode() {
        let encoded: [UInt8] = [
            0xbd, 0x7, 0xcb, 0x12, 0xbd, 0x29, 0x99, 0x20, 0xa1, 0x1, 0x9, 0x4b, 0xb9, 0x17, 0x7, 0xb1, 0x47, 0x56, 0xb8, 0xf, 0xd9, 0x5e, 0x49, 0xe2, 0xf9, 0xb3, 0x22, 0xae, 0xd8, 0x7f, 0x7, 0x5c, 0x89, 0xf7, 0x4a, 0x7c, 0xf2, 0x61, 0xcb, 0x97, 0xb2, 0x2a, 0x69, 0x57, 0xd2, 0xc1, 0x59, 0x21, 0x3a, 0x3b, 0xc6, 0x21, 0x1, 0x90, 0xe2, 0x1b, 0xe2, 0xd9, 0x40, 0x55, 0x11, 0x48, 0xb, 0x9f, 0x94, 0x7a, 0xd6, 0x10, 0x94, 0x6d, 0xcd, 0x24, 0x89, 0x25, 0x3, 0x48, 0x95, 0x6, 0x3b, 0xb3, 0x46, 0x45, 0x81, 0x50, 0xf4, 0x7c, 0x12, 0x9c
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "f0ZqxqdvkVg4dbxCxKzfyEfC1Vol1Dti1CWAJHyeg4E2gVV8xLqVT9BcG8tLmpX5OMGsQ50rCrm7HsDAyXC9Tg==")
    }

    func test_decodeUUIDKey_shouldDecode() {
        let encoded: [UInt8] = [
            0xed, 0x2, 0xf5, 0x7, 0xf0, 0x3c, 0x9f, 0x63, 0xe7, 0x63, 0x59, 0x4a, 0xb8, 0x58, 0x4b, 0xc4, 0xc, 0x7f, 0xef, 0x50, 0x94, 0x2b, 0x1b, 0x8c, 0xae, 0xd0, 0x2b, 0xa1, 0x8f, 0x58, 0x42, 0x1, 0x88, 0x85, 0x2d, 0x5
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "65dd5db5-475e-463b-9404-f5fcfc140108")
    }

    func test_decodeTrueBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0xaf, 0x45, 0xe4, 0x6
        ]
        XCTAssertTrue(ArkanaKeys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeFalseBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0xbd, 0x56, 0xfd, 0x10, 0xa0
        ]
        XCTAssertFalse(ArkanaKeys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeIntValue_shouldDecode() {
        let encoded: [UInt8] = [
            0xef, 0x5
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), 42)
    }

    func test_encodeAndDecodeValueWithDollarSign_shouldDecode() {
        let encoded: [UInt8] = [
            0xa9, 0x52, 0xf0, 0xf, 0x9a, 0x7c, 0x91, 0x3f, 0xa7, 0x8, 0x1d, 0x17, 0xbc, 0x11, 0x6
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "real_$lim_shady")
    }
}
