// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces
import XCTest
@testable import ArkanaKeys

final class ArkanaKeysTests: XCTestCase {
    private var salt: [UInt8]!
    private var globalSecrets: ArkanaKeysGlobalProtocol!

    override func setUp() {
        super.setUp()
        salt = [
            0x2c, 0x3e, 0x84, 0xeb, 0x7d, 0x47, 0, 0x59, 0x61, 0xc0, 0x9c, 0x86, 0xf7, 0x1a, 0x45, 0x56, 0x1b, 0x2c, 0x82, 0x98, 0x33, 0xc2, 0xf3, 0x7, 0x62, 0x38, 0xc2, 0x1a, 0xce, 0x1f, 0x9, 0x39, 0x8b, 0xdb, 0xab, 0x3c, 0xf2, 0x72, 0xb1, 0x1, 0x49, 0xcb, 0xea, 0x9f, 0x92, 0xa0, 0x58, 0x2d, 0x6e, 0x40, 0xe3, 0x36, 0x11, 0xe, 0x1d, 0xa4, 0x2b, 0xb7, 0x6a, 0x4e, 0x30, 0x1a, 0xe8, 0x60
        ]
        globalSecrets = ArkanaKeys.Global()
    }

    override func tearDown() {
        globalSecrets = nil
        salt = nil
        super.tearDown()
    }

    func test_decodeRandomHexKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x4d, 0xc, 0xe5, 0xde, 0x1c, 0x7e, 0x38, 0x6c, 0x52, 0xa5, 0xff, 0xe3, 0x93, 0x7b, 0x26, 0x66, 0x7a, 0x1f, 0xb3, 0xa0, 0x5, 0xa6, 0x90, 0x36, 0x56, 0xf, 0xf1, 0x2e, 0xff, 0x7d, 0x39, 0x8, 0xbe, 0xea, 0x9c, 0x58, 0xca, 0x43, 0xd0, 0x60, 0x2c, 0xfb, 0xd3, 0xa7, 0xf4, 0x97, 0x6c, 0x1a, 0x56, 0x70, 0xdb, 0xe, 0x27, 0x3c, 0x7f, 0x97, 0x1b, 0x8f, 0xb, 0x7a, 0x1, 0x7c, 0xdb, 0x58, 0x1e, 0x58, 0xb7, 0x8d, 0x4f, 0x7e, 0x63, 0x6d, 0x58, 0xf5, 0xaa, 0xb2, 0xc7, 0x2a, 0x74, 0x33, 0x2e, 0x48, 0xb3, 0xfc, 0x56, 0xf0, 0xc5, 0x62, 0x57, 0x5b, 0xa3, 0x7e, 0xac, 0x26, 0x6d, 0, 0xe8, 0xef, 0xc8, 0x4, 0xcb, 0x16, 0x80, 0x37, 0x7c, 0xae, 0x89, 0xa9, 0xf0, 0x92, 0x3e, 0x14, 0xc, 0x22, 0x87, 0x54, 0x70, 0x6a, 0x7e, 0x93, 0x1d, 0xd5, 0x52, 0x78, 0x54, 0x7c, 0xdd, 0x58
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "a2a5a9853ecedac0a3186dc147341b01517d81aae098f747808862b308a41f382f3f29c49564001e5d1de26e5cadb9d9c4c89d165ec6b2f9bbdbadc76b86df58")
    }

    func test_decodeRandomBase64Key_shouldDecode() {
        let encoded: [UInt8] = [
            0x5a, 0x58, 0xce, 0xc4, 0x36, 0x20, 0x67, 0x6c, 0x10, 0xb5, 0xcc, 0xe4, 0x95, 0x22, 0x10, 0x32, 0x56, 0x79, 0xef, 0xd7, 0x4a, 0x93, 0xbf, 0x63, 0x57, 0x7f, 0xf5, 0x77, 0x85, 0x6d, 0x71, 0x6e, 0xff, 0x81, 0xf9, 0x79, 0xbe, 0x23, 0xe8, 0x6b, 0xb, 0xa4, 0xa8, 0xab, 0xfa, 0x93, 0x12, 0x5f, 0x58, 0x14, 0xb7, 0x78, 0x78, 0x57, 0x2e, 0xd3, 0x46, 0x80, 0x52, 0x24, 0x9, 0x5c, 0x8b, 0x4, 0x7c, 0x4d, 0xdd, 0xaf, 0x2e, 0xf, 0x2b, 0x1b, 0x50, 0xad, 0xa8, 0xcd, 0x87, 0x68, 0x26, 0x1b, 0x62, 0x18, 0xb4, 0xfb, 0x2, 0xb5, 0xce, 0x3a
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "vfJ/Kgg5quPbb8UdMUmOyQLd5G7mKrxWtZRELQYjBoB4h3Jr6TTNiY3wm78j9FcdPsYDSH+B1m4KprcMy46c1w==")
    }

    func test_decodeUUIDKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x49, 0x58, 0xe2, 0xd2, 0x1f, 0x7e, 0x31, 0x6a, 0x4c, 0xa2, 0xad, 0xe3, 0xcf, 0x37, 0x71, 0x33, 0x2c, 0x4a, 0xaf, 0xf9, 0xb, 0xf7, 0xca, 0x2a, 0x5b, 0xa, 0xf1, 0x7b, 0xff, 0x2d, 0x3a, 0x1, 0xed, 0xef, 0xcf, 0x5d
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "eff9b913-b1e8-4e7f-a859-923a1238f4da")
    }

    func test_decodeTrueBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x58, 0x4c, 0xf1, 0x8e
        ]
        XCTAssertTrue(ArkanaKeys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeFalseBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x4a, 0x5f, 0xe8, 0x98, 0x18
        ]
        XCTAssertFalse(ArkanaKeys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeIntValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x18, 0xc
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), 42)
    }

    func test_encodeAndDecodeValueWithDollarSign_shouldDecode() {
        let encoded: [UInt8] = [
            0x5e, 0x5b, 0xe5, 0x87, 0x22, 0x63, 0x6c, 0x30, 0xc, 0x9f, 0xef, 0xee, 0x96, 0x7e, 0x3c
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "real_$lim_shady")
    }
}
