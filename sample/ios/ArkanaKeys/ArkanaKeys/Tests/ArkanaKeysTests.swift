// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces
import XCTest
@testable import ArkanaKeys

final class ArkanaKeysTests: XCTestCase {
    private var salt: [UInt8]!
    private var globalSecrets: ArkanaKeysGlobalProtocol!

    override func setUp() {
        super.setUp()
        salt = [
            0xe7, 0x52, 0xad, 0x9f, 0x7, 0xac, 0xb5, 0xb0, 0x1, 0xdb, 0x31, 0x85, 0x93, 0x1e, 0x45, 0xac, 0x94, 0xc2, 0x65, 0xd5, 0x30, 0x22, 0x45, 0xcf, 0x10, 0x51, 0x5d, 0x73, 0x12, 0x2f, 0x86, 0x20, 0x30, 0x5b, 0, 0xde, 0x72, 0x6, 0x6d, 0x51, 0xa4, 0x89, 0xdf, 0xce, 0xc2, 0xec, 0xcf, 0x26, 0x24, 0xae, 0x82, 0x60, 0x89, 0xf2, 0x95, 0x83, 0x56, 0x60, 0x83, 0x66, 0x88, 0xae, 0xe7, 0xd2
        ]
        globalSecrets = ArkanaKeys.Global()
    }

    override func tearDown() {
        globalSecrets = nil
        salt = nil
        super.tearDown()
    }

    func test_decodeRandomHexKey_shouldDecode() {
        let encoded: [UInt8] = [
            0xd7, 0x30, 0x9f, 0xaf, 0x64, 0xc9, 0x80, 0x89, 0x34, 0xe3, 0x55, 0xb6, 0xf7, 0x78, 0x27, 0x98, 0xf6, 0xf2, 0x1, 0xb0, 0x1, 0x47, 0x76, 0xae, 0x22, 0x34, 0x6d, 0x4b, 0x70, 0x4c, 0xb1, 0x19, 0x54, 0x6c, 0x62, 0xe6, 0x4a, 0x31, 0x9, 0x35, 0xc0, 0xba, 0xee, 0xfe, 0xf0, 0x89, 0xae, 0x17, 0x1d, 0x96, 0xe6, 0x54, 0xed, 0xcb, 0xad, 0xb0, 0x33, 0x6, 0xbb, 0x54, 0xea, 0x96, 0xd2, 0xe2, 0xde, 0x62, 0x9f, 0xaf, 0x65, 0x94, 0xd0, 0xd1, 0x30, 0xe9, 0, 0xb6, 0xf2, 0x28, 0x77, 0xcf, 0xf7, 0xfa, 0x5c, 0xe4, 0x56, 0x41, 0x71, 0xaa, 0x74, 0x67, 0x38, 0x41, 0x23, 0x16, 0xe5, 0x18, 0x52, 0x6c, 0x30, 0xbb, 0x4b, 0x60, 0xc, 0x68, 0xc2, 0xba, 0xbd, 0xf8, 0xf1, 0xdd, 0xfd, 0x17, 0x46, 0x9c, 0xb1, 0x59, 0xe8, 0x91, 0xf0, 0xbb, 0x66, 0x56, 0xb1, 0x51, 0xbd, 0xc8, 0xd7, 0xe7
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "0b20ce5958d3dfb4b0de1e3a2e08bc79d7b887ddd3102ea198d4d983ef82b8509020b8ea1213a62cc891fc4ed6e219c8b70e9fa9f3b63121b239ace806275f05")
    }

    func test_decodeRandomBase64Key_shouldDecode() {
        let encoded: [UInt8] = [
            0xab, 0x31, 0xff, 0xda, 0x45, 0xcb, 0x9a, 0x84, 0x66, 0xed, 0x52, 0xfd, 0xa7, 0x46, 0x1c, 0xc0, 0xe5, 0xb8, 0xd, 0xb9, 0x6, 0x58, 0xa, 0x9f, 0x5a, 0x3c, 0x39, 0x47, 0x7a, 0x64, 0xd2, 0x6a, 0x48, 0x35, 0x56, 0xb8, 0x3d, 0x4f, 0x2c, 0x37, 0xee, 0xb1, 0x93, 0xa5, 0xae, 0xa7, 0xf9, 0x5c, 0x47, 0x9f, 0xa9, 0xb, 0xde, 0x87, 0xa6, 0xb2, 0x2c, 0x50, 0xd0, 0x24, 0xcb, 0xc0, 0xcc, 0x9a, 0x80, 0x7, 0xff, 0xd2, 0x76, 0xc3, 0x81, 0xc4, 0x37, 0xb1, 0x42, 0xed, 0xe6, 0x7a, 0x73, 0xf8, 0xa2, 0xbb, 0x13, 0x9e, 0x7e, 0x55, 0x78, 0xf2
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "LcREBg/4g6cx4XYlqzhl6zOPJmd4hKTJxnVfOIAfJ8LklK6zc1+kWu31z0SBCn+HgURMqo4t6jshud6T6yvKNw==")
    }

    func test_decodeUUIDKey_shouldDecode() {
        let encoded: [UInt8] = [
            0xd5, 0x34, 0x99, 0xf9, 0x34, 0x9e, 0x8d, 0xd5, 0x2c, 0xbe, 0x5, 0xbd, 0xaa, 0x33, 0x71, 0x9a, 0xf0, 0xf0, 0x48, 0xed, 0x1, 0x11, 0x73, 0xe2, 0x72, 0x61, 0x69, 0x46, 0x2a, 0x4c, 0xb2, 0x16, 0x53, 0x6f, 0x35, 0xea
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "2f4f328e-e489-46d2-8136-b0458c46c454")
    }

    func test_decodeTrueBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x93, 0x20, 0xd8, 0xfa
        ]
        XCTAssertTrue(ArkanaKeys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeFalseBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x81, 0x33, 0xc1, 0xec, 0x62
        ]
        XCTAssertFalse(ArkanaKeys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeIntValue_shouldDecode() {
        let encoded: [UInt8] = [
            0xd3, 0x60
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), 42)
    }

    func test_encodeAndDecodeValueWithDollarSign_shouldDecode() {
        let encoded: [UInt8] = [
            0x95, 0x37, 0xcc, 0xf3, 0x58, 0x88, 0xd9, 0xd9, 0x6c, 0x84, 0x42, 0xed, 0xf2, 0x7a, 0x3c
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "real_$lim_shady")
    }
}
