// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces
import XCTest
@testable import ArkanaKeys

final class ArkanaKeysTests: XCTestCase {
    private var salt: [UInt8]!
    private var globalSecrets: ArkanaKeysGlobalProtocol!

    override func setUp() {
        super.setUp()
        salt = [
            0x5d, 0xa0, 0x4d, 0x30, 0x47, 0xa6, 0xc3, 0x36, 0xda, 0x7c, 0xd5, 0xfd, 0xc6, 0xa, 0xfd, 0x98, 0xa5, 0x79, 0x88, 0x6c, 0x73, 0x63, 0x19, 0x95, 0x5d, 0x3a, 0xc8, 0x4, 0x9e, 0xd8, 0x8f, 0x26, 0x3f, 0x77, 0x39, 0xa2, 0xfa, 0xfb, 0x77, 0x3a, 0x4c, 0x2c, 0x53, 0x60, 0xba, 0x2f, 0xec, 0x43, 0x1f, 0x9f, 0xb, 0x4f, 0x9b, 0x88, 0xa6, 0xdd, 0xfc, 0x10, 0x3b, 0x3e, 0x1b, 0, 0x86, 0x72
        ]
        globalSecrets = ArkanaKeys.Global()
    }

    override func tearDown() {
        globalSecrets = nil
        salt = nil
        super.tearDown()
    }

    func test_decodeRandomHexKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x6d, 0xc4, 0x2b, 0x51, 0x71, 0xc2, 0xa0, 0x1, 0xef, 0x4c, 0xe3, 0x99, 0xf1, 0x38, 0xcc, 0xfe, 0x91, 0x4a, 0xed, 0x5a, 0x43, 0x54, 0x2e, 0xf4, 0x3c, 0xe, 0xab, 0x31, 0xa7, 0xe8, 0xeb, 0x45, 0xe, 0x11, 0xf, 0x92, 0x9b, 0xc8, 0x44, 0xd, 0x29, 0x1b, 0x61, 0x53, 0x82, 0x1d, 0x89, 0x75, 0x2d, 0xaa, 0x68, 0x7d, 0xfd, 0xb9, 0xc2, 0xea, 0xc9, 0x20, 0x3, 0x8, 0x7f, 0x62, 0xe3, 0x41, 0x39, 0xc3, 0x78, 0x4, 0x73, 0xc5, 0xa0, 0x2, 0xef, 0x1a, 0xb7, 0x99, 0xa7, 0x33, 0x98, 0xfc, 0x92, 0x4d, 0xbd, 0x5e, 0x46, 0x5, 0x78, 0xa0, 0x6b, 0xc, 0xad, 0x62, 0xf8, 0xbd, 0xbc, 0x17, 0xa, 0x46, 0x8, 0xc0, 0x99, 0xc8, 0x4e, 0xb, 0x2e, 0x14, 0x6a, 0x50, 0x8a, 0x1e, 0x8f, 0x7a, 0x29, 0xaa, 0x3b, 0x7d, 0xa2, 0xec, 0xc5, 0xbe, 0xc8, 0x23, 0xa, 0xf, 0x2b, 0x62, 0xe3, 0x41
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "0dfa6dc7506d721f43e6077aa4c590dc1f60a337e72382e625c2f1d75086dbe3dc544cc45fbda9ed74525fa566effe31511bc391b89001c965029dcc43110be3")
    }

    func test_decodeRandomBase64Key_shouldDecode() {
        let encoded: [UInt8] = [
            0x2f, 0xcd, 0x7a, 0x60, 0x12, 0x94, 0x88, 0x67, 0x9b, 0x4d, 0xb6, 0xaf, 0xf4, 0x5a, 0x9b, 0xde, 0xca, 0x14, 0xb9, 0x3b, 0x47, 0x30, 0x70, 0xcc, 0x3f, 0x4a, 0xb0, 0x4a, 0xb1, 0xe1, 0xcc, 0x4f, 0x76, 0x41, 0x7b, 0xfb, 0xbf, 0x93, 0x39, 0x5c, 0x3a, 0x1e, 0x14, 0x2c, 0xf9, 0x1b, 0x99, 0x6, 0x2d, 0xec, 0x7b, 0x15, 0xad, 0xc7, 0xd0, 0x91, 0x8b, 0x43, 0x71, 0x54, 0x57, 0x75, 0xe5, 0x7, 0x27, 0xf0, 0x3c, 0x5f, 0x8, 0xed, 0xa2, 0x43, 0x92, 0x39, 0x9a, 0x98, 0xff, 0x3f, 0xd2, 0xa9, 0xe7, 0xb, 0xbd, 0x3c, 0x47, 0x22, 0x24, 0xa8
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "rm7PU2KQA1cR2PfFom1W4SiYbpxN/9CiI6BYEhNfv2GLC4uE2spZ6OvLwSJjLucuzPqoOKauHEOe95/1Br5P4A==")
    }

    func test_decodeUUIDKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x3b, 0xc1, 0x7c, 0x2, 0x7f, 0x90, 0xa7, 0x3, 0xf7, 0x4d, 0xb6, 0xce, 0xa7, 0x27, 0xc9, 0xaa, 0x9d, 0x4b, 0xa5, 0x54, 0x44, 0x53, 0x78, 0xb8, 0x6a, 0x59, 0xfe, 0x65, 0xfc, 0xba, 0xb9, 0x42, 0xb, 0x45, 0xd, 0xc6
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "fa1286d5-1c3a-4282-870a-7c6abb6d424d")
    }

    func test_decodeTrueBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x29, 0xd2, 0x38, 0x55
        ]
        XCTAssertTrue(ArkanaKeys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeFalseBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x3b, 0xc1, 0x21, 0x43, 0x22
        ]
        XCTAssertFalse(ArkanaKeys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeIntValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x69, 0x92
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), 42)
    }

    func test_encodeAndDecodeValueWithDollarSign_shouldDecode() {
        let encoded: [UInt8] = [
            0x2f, 0xc5, 0x2c, 0x5c, 0x18, 0x82, 0xaf, 0x5f, 0xb7, 0x23, 0xa6, 0x95, 0xa7, 0x6e, 0x84
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "real_$lim_shady")
    }
}
