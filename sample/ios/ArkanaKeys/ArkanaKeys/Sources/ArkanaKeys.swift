// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces

public enum ArkanaKeys {
    @inline(__always)
    fileprivate static let salt: [UInt8] = [
        0xe7, 0xa8, 0x8b, 0x89, 0x67, 0xbc, 0x26, 0x29, 0xd, 0xd3, 0xa0, 0x24, 0xbb, 0xe, 0x3e, 0xd4, 0x9f, 0xfd, 0x2a, 0xb, 0xc2, 0x3b, 0x55, 0x3f, 0x6c, 0xce, 0xf5, 0xe4, 0x2b, 0xfe, 0xed, 0x71, 0xc9, 0x4c, 0xda, 0xcc, 0x68, 0x9d, 0x92, 0xcc, 0x43, 0x2f, 0xe1, 0xed, 0x10, 0x86, 0x22, 0xdf, 0x7f, 0xe8, 0x55, 0x91, 0xda, 0xa3, 0x45, 0x22, 0xa7, 0x60, 0x1d, 0x10, 0x73, 0xaf, 0xe1, 0x36
    ]

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> String {
        return String(decoding: encoded.enumerated().map { offset, element in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Bool {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Bool(stringValue)!
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Int {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Int(stringValue)!
    }
}

public extension ArkanaKeys {
    struct Global: ArkanaKeysGlobalProtocol {
        public init() {}
    }
}

public extension ArkanaKeys {
    struct Staging: ArkanaKeysEnvironmentProtocol {
        public init() {}
    }
}
public extension ArkanaKeys {
    struct Release: ArkanaKeysEnvironmentProtocol {
        public init() {}
    }
}
