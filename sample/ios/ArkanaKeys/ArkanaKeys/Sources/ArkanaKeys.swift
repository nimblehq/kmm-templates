// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces

public enum ArkanaKeys {
    @inline(__always)
    fileprivate static let salt: [UInt8] = [
        0xf6, 0x2, 0x90, 0xa4, 0xfd, 0x71, 0x6, 0x3d, 0x9, 0x3d, 0xd2, 0x5f, 0xfc, 0x61, 0x9a, 0x87, 0x98, 0xb0, 0x9f, 0xf0, 0x3b, 0xde, 0x64, 0xdb, 0x18, 0xf0, 0x32, 0x2a, 0xcb, 0x2c, 0xf1, 0x8f, 0x29, 0xc4, 0x2, 0xfa, 0x48, 0x9f, 0x1, 0x1e, 0x5f, 0x5f, 0x25, 0x6a, 0x4a, 0x6, 0xbe, 0xc8, 0x64, 0xe8, 0xb0, 0xe9, 0xd7, 0x73, 0x79, 0x99, 0x4a, 0xd8, 0x18, 0x4e, 0xa3, 0x38, 0xaf, 0x83
    ]

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> String {
        return String(decoding: encoded.enumerated().map { offset, element in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Bool {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Bool(stringValue)!
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Int {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Int(stringValue)!
    }
}

public extension ArkanaKeys {
    struct Global: ArkanaKeysGlobalProtocol {
        public init() {}
    }
}

public extension ArkanaKeys {
    struct Staging: ArkanaKeysEnvironmentProtocol {
        public init() {}
    }
}
public extension ArkanaKeys {
    struct Release: ArkanaKeysEnvironmentProtocol {
        public init() {}
    }
}
