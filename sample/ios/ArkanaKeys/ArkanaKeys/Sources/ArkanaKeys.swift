// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces

public enum ArkanaKeys {
    @inline(__always)
    fileprivate static let salt: [UInt8] = [
        0x5d, 0xa0, 0x4d, 0x30, 0x47, 0xa6, 0xc3, 0x36, 0xda, 0x7c, 0xd5, 0xfd, 0xc6, 0xa, 0xfd, 0x98, 0xa5, 0x79, 0x88, 0x6c, 0x73, 0x63, 0x19, 0x95, 0x5d, 0x3a, 0xc8, 0x4, 0x9e, 0xd8, 0x8f, 0x26, 0x3f, 0x77, 0x39, 0xa2, 0xfa, 0xfb, 0x77, 0x3a, 0x4c, 0x2c, 0x53, 0x60, 0xba, 0x2f, 0xec, 0x43, 0x1f, 0x9f, 0xb, 0x4f, 0x9b, 0x88, 0xa6, 0xdd, 0xfc, 0x10, 0x3b, 0x3e, 0x1b, 0, 0x86, 0x72
    ]

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> String {
        return String(decoding: encoded.enumerated().map { offset, element in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Bool {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Bool(stringValue)!
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Int {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Int(stringValue)!
    }
}

public extension ArkanaKeys {
    struct Global: ArkanaKeysGlobalProtocol {
        public init() {}
    }
}

public extension ArkanaKeys {
    struct Staging: ArkanaKeysEnvironmentProtocol {
        public init() {}
    }
}
public extension ArkanaKeys {
    struct Release: ArkanaKeysEnvironmentProtocol {
        public init() {}
    }
}
