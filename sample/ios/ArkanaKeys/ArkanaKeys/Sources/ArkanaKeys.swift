// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces

public enum ArkanaKeys {
    @inline(__always)
    fileprivate static let salt: [UInt8] = [
        0x2c, 0x3e, 0x84, 0xeb, 0x7d, 0x47, 0, 0x59, 0x61, 0xc0, 0x9c, 0x86, 0xf7, 0x1a, 0x45, 0x56, 0x1b, 0x2c, 0x82, 0x98, 0x33, 0xc2, 0xf3, 0x7, 0x62, 0x38, 0xc2, 0x1a, 0xce, 0x1f, 0x9, 0x39, 0x8b, 0xdb, 0xab, 0x3c, 0xf2, 0x72, 0xb1, 0x1, 0x49, 0xcb, 0xea, 0x9f, 0x92, 0xa0, 0x58, 0x2d, 0x6e, 0x40, 0xe3, 0x36, 0x11, 0xe, 0x1d, 0xa4, 0x2b, 0xb7, 0x6a, 0x4e, 0x30, 0x1a, 0xe8, 0x60
    ]

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> String {
        return String(decoding: encoded.enumerated().map { offset, element in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Bool {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Bool(stringValue)!
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Int {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Int(stringValue)!
    }
}

public extension ArkanaKeys {
    struct Global: ArkanaKeysGlobalProtocol {
        public init() {}
    }
}

public extension ArkanaKeys {
    struct Staging: ArkanaKeysEnvironmentProtocol {
        public init() {}
    }
}
public extension ArkanaKeys {
    struct Release: ArkanaKeysEnvironmentProtocol {
        public init() {}
    }
}
