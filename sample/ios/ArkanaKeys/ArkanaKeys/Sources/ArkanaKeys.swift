// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces

public enum ArkanaKeys {
    @inline(__always)
    fileprivate static let salt: [UInt8] = [
        0x86, 0xd4, 0xdb, 0x6d, 0x70, 0xe0, 0xde, 0xe0, 0x6d, 0x4f, 0x60, 0x7, 0x14, 0xe6, 0xad, 0x82, 0xe0, 0xea, 0xbc, 0x97, 0x11, 0xa9, 0x57, 0x38, 0xbb, 0x1f, 0xa7, 0x26, 0x8c, 0x12, 0xe1, 0x81, 0xe, 0x86, 0x5e, 0x27, 0x8e, 0xd0, 0x74, 0xfa, 0xab, 0x65, 0x2e, 0xe2, 0x60, 0x39, 0xaf, 0xd0, 0xe6, 0x90, 0x5f, 0xb0, 0x1c, 0xb1, 0xf6, 0xf3, 0x56, 0x59, 0x89, 0x7f, 0xc8, 0x1c, 0x22, 0xcc
    ]

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> String {
        return String(decoding: encoded.enumerated().map { offset, element in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Bool {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Bool(stringValue)!
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Int {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Int(stringValue)!
    }
}

public extension ArkanaKeys {
    struct Global: ArkanaKeysGlobalProtocol {
        public init() {}
    }
}

public extension ArkanaKeys {
    struct Staging: ArkanaKeysEnvironmentProtocol {
        public init() {}
    }
}
public extension ArkanaKeys {
    struct Release: ArkanaKeysEnvironmentProtocol {
        public init() {}
    }
}
