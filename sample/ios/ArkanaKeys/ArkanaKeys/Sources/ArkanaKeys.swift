// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces

public enum ArkanaKeys {
    @inline(__always)
    fileprivate static let salt: [UInt8] = [
        0xe1, 0x1e, 0xe3, 0x73, 0x8, 0x2, 0xc5, 0xda, 0x3, 0xc4, 0xc1, 0x22, 0x93, 0x5c, 0x77, 0xa1, 0x11, 0xb6, 0xe9, 0x84, 0xd1, 0xb, 0xc3, 0xc, 0x98, 0xfa, 0xe4, 0x9c, 0x5c, 0x23, 0x6d, 0x7, 0xe, 0x98, 0x71, 0xb4, 0x41, 0xaa, 0x94, 0x29, 0x9e, 0x88, 0x85, 0x62, 0x67, 0x7, 0xbe, 0x93, 0xf6, 0xb8, 0xd7, 0x5f, 0xb5, 0xa0, 0x7a, 0xa0, 0x80, 0x34, 0x3a, 0x54, 0xe9, 0xa5, 0x8e, 0x69
    ]

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> String {
        return String(decoding: encoded.enumerated().map { offset, element in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Bool {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Bool(stringValue)!
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Int {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Int(stringValue)!
    }
}

public extension ArkanaKeys {
    struct Global: ArkanaKeysGlobalProtocol {
        public init() {}
    }
}

public extension ArkanaKeys {
    struct Staging: ArkanaKeysEnvironmentProtocol {
        public init() {}
    }
}
public extension ArkanaKeys {
    struct Release: ArkanaKeysEnvironmentProtocol {
        public init() {}
    }
}
