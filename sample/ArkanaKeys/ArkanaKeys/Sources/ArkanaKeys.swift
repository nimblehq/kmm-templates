// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces

public enum ArkanaKeys {
    @inline(__always)
    fileprivate static let salt: [UInt8] = [
        0xe7, 0x52, 0xad, 0x9f, 0x7, 0xac, 0xb5, 0xb0, 0x1, 0xdb, 0x31, 0x85, 0x93, 0x1e, 0x45, 0xac, 0x94, 0xc2, 0x65, 0xd5, 0x30, 0x22, 0x45, 0xcf, 0x10, 0x51, 0x5d, 0x73, 0x12, 0x2f, 0x86, 0x20, 0x30, 0x5b, 0, 0xde, 0x72, 0x6, 0x6d, 0x51, 0xa4, 0x89, 0xdf, 0xce, 0xc2, 0xec, 0xcf, 0x26, 0x24, 0xae, 0x82, 0x60, 0x89, 0xf2, 0x95, 0x83, 0x56, 0x60, 0x83, 0x66, 0x88, 0xae, 0xe7, 0xd2
    ]

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> String {
        return String(decoding: encoded.enumerated().map { offset, element in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Bool {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Bool(stringValue)!
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Int {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Int(stringValue)!
    }
}

public extension ArkanaKeys {
    struct Global: ArkanaKeysGlobalProtocol {
        public init() {}
    }
}

public extension ArkanaKeys {
    struct Staging: ArkanaKeysEnvironmentProtocol {
        public init() {}
    }
}
public extension ArkanaKeys {
    struct Release: ArkanaKeysEnvironmentProtocol {
        public init() {}
    }
}
